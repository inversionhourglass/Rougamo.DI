name: Publish Release NuGets on tag
on:
  push:
    tags:
      - '*'
env:
  SOLUTION: Rougamo.DI.sln
jobs:
  publish:
    name: Build and Publish
    runs-on: windows-latest
    permissions:
      contents: write
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Setup .NET
        uses: actions/setup-dotnet@v3.0.3
        with:
          dotnet-version: |
            3.1.x
            5.0.x
            6.0.x
            7.0.x
            8.0.x

      - name: Restore NuGets
        run: dotnet restore ${{ env.SOLUTION }}

      - name: Abstractions Version Setup
        run: |
          $tagName = "${{ github.ref_name }}"
          if ($tagName -notlike "abstract-*") {
            $abstractions = @("Rougamo.Extensions.DependencyInjection.Abstractions", "Rougamo.Extensions.DependencyInjection.AspNetCore.Abstractions")
            foreach ($packageName in $abstractions) {
              # 从nuget.org获取最新正式版的版本号
              $pattern = "^> $packageName \| (\S+) "
              $packages = nuget search $packageName
              foreach ($pkg in $packages) {
                if ($pkg -match $pattern) {
                  $latestVersion = $matches[1]
                }
              }
              if ($latestVersion -eq $null) {
                throw "Cannot get the latest stable version of $packageName from nuget.org"
              }
              echo "The latest stable version of $packageName is $latestVersion"

              # 修改项目文件版本号
              $xmlPath = "src/$packageName/$packageName.csproj"
              [xml]$xmlDoc = Get-Content $xmlPath
              $propertyGroup = $xmlDoc.Project.PropertyGroup
              $versionPrefixNode = $propertyGroup.SelectSingleNode("VersionPrefix")
              $newVersionNode = $xmlDoc.CreateElement("Version")
              $newVersionNode.InnerText = $latestVersion
              $propertyGroup.RemoveChild($versionPrefixNode)
              $propertyGroup.AppendChild($newVersionNode)
              $xmlDoc.Save($xmlPath)
            }
          } else {
            echo "Do not need to setup abstraction projects' version."
          }

      - name: Build Solution
        run: dotnet build --configuration Release --no-restore ${{ env.SOLUTION }}

      - name: Run Tests
        run: dotnet test --configuration Release --no-build ${{ env.SOLUTION }}

      - name: Delete exists packages
        run: Remove-Item -Path nugets -Recurse -Force -ErrorAction SilentlyContinue

      - name: Pack NuGets
        run: dotnet pack ${{ env.SOLUTION }} --no-build --configuration Release

      - name: Publish
        run: |
          $tagName = "${{ github.ref_name }}"
          if ($tagName -like "microsoft-*") {
            $genericHost = Get-ChildItem -Path nugets | Where-Object { $_.Name -match "Rougamo\.Extensions\.DependencyInjection\.GenericHost\.\d+\.\d+\.\d+\.nupkg" }
            $aspnetcore = Get-ChildItem -Path nugets | Where-Object { $_.Name -match "Rougamo\.Extensions\.DependencyInjection\.AspNetCore\.\d+\.\d+\.\d+\.nupkg" }
            $nupkgs = @($genericHost.FullName, $aspnetcore.FullName)
          } elseif ($tagName -like "autofac-*") {
            $genericHost = Get-ChildItem -Path nugets | Where-Object { $_.Name -match "Rougamo\.Extensions\.DependencyInjection\.Autofac\.\d+\.\d+\.\d+\.nupkg" }
            $aspnetcore = Get-ChildItem -Path nugets | Where-Object { $_.Name -match "Rougamo\.Extensions\.DependencyInjection\.Autofac\.AspNetCore\.\d+\.\d+\.\d+\.nupkg" }
            $nupkgs = @($genericHost.FullName, $aspnetcore.FullName)
          } elseif ($tagName -like "abstract-*") {
            $genericHost = Get-ChildItem -Path nugets | Where-Object { $_.Name -match "Rougamo\.Extensions\.DependencyInjection\.Abstractions\.\d+\.\d+\.\d+\.nupkg" }
            $aspnetcore = Get-ChildItem -Path nugets | Where-Object { $_.Name -match "Rougamo\.Extensions\.DependencyInjection\.AspNetCore\.Abstractions\.\d+\.\d+\.\d+\.nupkg" }
            $nupkgs = @($genericHost.FullName, $aspnetcore.FullName)
          } else {
            $nupkgs = @()
          }
          foreach ($nupkg in $nupkgs) {
            dotnet nuget push $nupkg -k ${{ secrets.API_KEY }} -s https://api.nuget.org/v3/index.json
          }

      - name: Create github release
        uses: ncipollo/release-action@v1
        with:
          bodyFile: CHANGELOG.md
